#include "pch.hpp"
#include "D3D11/InternalD3D11.hpp"

namespace Weave::D3D11
{
	static const std::unordered_map<DXGI_MODE_SCALING, string_view> s_ScalingModeNames
	{
		{ DXGI_MODE_SCALING_UNSPECIFIED, "MODE_SCALING_UNSPECIFIED" },
		{ DXGI_MODE_SCALING_CENTERED, "MODE_SCALING_CENTERED" },
		{ DXGI_MODE_SCALING_STRETCHED, "MODE_SCALING_STRETCHED" }
	};

	string_view GetScalingModeName(DXGI_MODE_SCALING mode) { return GetEnumName(mode, s_ScalingModeNames); }

	static const std::unordered_map<DXGI_ALPHA_MODE, string_view> s_AlphaModeNames
	{
		{ DXGI_ALPHA_MODE_UNSPECIFIED, "ALPHA_MODE_UNSPECIFIED" },
		{ DXGI_ALPHA_MODE_PREMULTIPLIED, "ALPHA_MODE_PREMULTIPLIED" },
		{ DXGI_ALPHA_MODE_STRAIGHT, "ALPHA_MODE_STRAIGHT" },
		{ DXGI_ALPHA_MODE_IGNORE, "ALPHA_MODE_IGNORE" },
		{ DXGI_ALPHA_MODE_FORCE_DWORD, "ALPHA_MODE_FORCE_DWORD" }
	};

	string_view GetAlphaModeName(DXGI_ALPHA_MODE mode) { return GetEnumName(mode, s_AlphaModeNames); }

	static const std::unordered_map<DXGI_SCALING, string_view> s_SwapScalingModeNames
	{
		{ DXGI_SCALING_STRETCH, "SCALING_STRETCH" },
		{ DXGI_SCALING_NONE, "SCALING_NONE" },
		{ DXGI_SCALING_ASPECT_RATIO_STRETCH, "SCALING_ASPECT_RATIO_STRETCH" }
	};

	string_view GetScalingModeName(DXGI_SCALING mode) { return GetEnumName(mode, s_SwapScalingModeNames); }

	static const std::unordered_map<DXGI_SWAP_EFFECT, string_view> s_SwapModeNames
	{
		{ DXGI_SWAP_EFFECT_DISCARD, "SWAP_EFFECT_DISCARD" },
		{ DXGI_SWAP_EFFECT_SEQUENTIAL, "SWAP_EFFECT_SEQUENTIAL" },
		{ DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL, "SWAP_EFFECT_FLIP_SEQUENTIAL" },
		{ DXGI_SWAP_EFFECT_FLIP_DISCARD, "SWAP_EFFECT_FLIP_DISCARD" }
	};

	string_view GetSwapModeName(DXGI_SWAP_EFFECT mode) { return GetEnumName(mode, s_SwapModeNames); }

	static const std::unordered_map<DXGI_SWAP_CHAIN_FLAG, string_view> s_SwapChainFlagNames
	{
		{ DXGI_SWAP_CHAIN_FLAG_NONPREROTATED, "SWAP_CHAIN_FLAG_NONPREROTATED" },
		{ DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH, "SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH" },
		{ DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE, "SWAP_CHAIN_FLAG_GDI_COMPATIBLE" },
		{ DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT, "SWAP_CHAIN_FLAG_RESTRICTED_CONTENT" },
		{ DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER, "SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER" },
		{ DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY, "SWAP_CHAIN_FLAG_DISPLAY_ONLY" },
		{ DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT, "SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT" },
		{ DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER, "SWAP_CHAIN_FLAG_FOREGROUND_LAYER" },
		{ DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO, "SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO" },
		{ DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO, "SWAP_CHAIN_FLAG_YUV_VIDEO" },
		{ DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED, "SWAP_CHAIN_FLAG_HW_PROTECTED" },
		{ DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING, "SWAP_CHAIN_FLAG_ALLOW_TEARING" },
		{ DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS, "SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS" }
	};

	string_view GetSwapChainFlagName(DXGI_SWAP_CHAIN_FLAG flag) { return GetEnumName(flag, s_SwapChainFlagNames); }

	static const std::unordered_map<D3D_FEATURE_LEVEL, string_view> s_FeatureLevelNames
	{
		{ D3D_FEATURE_LEVEL_1_0_CORE, "FEATURE_LEVEL_1_0_CORE" },
		{ D3D_FEATURE_LEVEL_9_1, "FEATURE_LEVEL_9_1" },
		{ D3D_FEATURE_LEVEL_9_2, "FEATURE_LEVEL_9_2" },
		{ D3D_FEATURE_LEVEL_9_3, "FEATURE_LEVEL_9_3" },
		{ D3D_FEATURE_LEVEL_10_0, "FEATURE_LEVEL_10_0" },
		{ D3D_FEATURE_LEVEL_10_1, "FEATURE_LEVEL_10_1" },
		{ D3D_FEATURE_LEVEL_11_0, "FEATURE_LEVEL_11_0" },
		{ D3D_FEATURE_LEVEL_11_1, "FEATURE_LEVEL_11_1" },
		{ D3D_FEATURE_LEVEL_12_0, "FEATURE_LEVEL_12_0" },
		{ D3D_FEATURE_LEVEL_12_1, "FEATURE_LEVEL_12_1" },
		{ D3D_FEATURE_LEVEL_12_2, "FEATURE_LEVEL_12_2" }
	};

	string_view GetFeatureLevelName(D3D_FEATURE_LEVEL level) { return GetEnumName(level, s_FeatureLevelNames); }
}
